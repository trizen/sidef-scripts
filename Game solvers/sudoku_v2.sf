#!/usr/bin/ruby

# A simple Sudoku solver (recursive).

# See also:
#    http://rosettacode.org/wiki/Sudoku

func check(i, j) {
    var (id, im) = i.divmod(9)
    var (jd, jm) = j.divmod(9)

    jd == id && return true
    jm == im && return true

    (id//3 == jd//3) &&
    (jm//3 == im//3)
}

var gRange = ^81
var lookup = []

for i,j in (gRange ~X gRange) {
    lookup[i][j] = check(i, j)
}

func solve_sudoku(callback, grid) {
    func() {
        for i in (gRange) {
            grid[i] && next

            (var t = Hash()){
                grid[gRange -> grep {|j| lookup[i][j] }]
            } = ()

            { |k|
                t.has_key(k) && next
                grid[i] = k
                __FUNC__()
            } * 9

            grid[i] = 0
            return()
        }

        callback(grid)
    }()
}

var grid = %i(
    5 3 0  0 2 4  7 0 0
    0 0 2  0 0 0  8 0 0
    1 0 0  7 0 3  9 0 2

    0 0 8  0 7 2  0 4 9
    0 2 0  9 8 0  0 7 0
    7 9 0  0 0 0  0 8 0

    0 0 0  0 3 0  5 0 6
    9 6 0  0 1 0  3 0 0
    0 5 0  6 9 0  0 1 0
)

func display_solution(grid) {
    for i in ^grid {
        print "#{grid[i]} ";
        print " "  if (3  -> divides(i+1))
        print "\n" if (9  -> divides(i+1))
        print "\n" if (27 -> divides(i+1))
    }
}

solve_sudoku(display_solution, grid)
