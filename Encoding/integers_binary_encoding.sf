#!/usr/bin/ruby

# Author: Trizen
# Date: 23 March 2023
# https://github.com/trizen

# Encode and decode a random list of integers into a binary string.

func encode_integers (Array compressed) {

    var counts = []
    var count = 0
    var bits_per_symbol = 2
    var processed_len = 0

    for k in (compressed) {
        while (k >= bits_per_symbol) {

            if (count > 0) {
                counts << [bits_per_symbol.len(2)-1, count]
                processed_len += count
            }

            count = 0
            bits_per_symbol *= 2
        }
        ++count
    }

    counts << [bits_per_symbol.len(2)-1, compressed.len - processed_len]

    var clen = counts.len
    var header = clen.chr

    for b,len in (counts) {
        header += chr(b)
        header += pack('N', len)
    }

    var bits = []

    for b,len in (counts) {
        len > 0 || next
        bits << compressed.splice(0, len).map{ sprintf('%0*s', b, .as_bin) }...
    }

    header + pack('B*', bits.join)
}

func decode_integers (String str) {

    func str_shift(Ref s) {
        with ((*s).substr(0, 1)) { |t| (*s).substr!(1); t }
    }

    var count_len = str_shift(\str).ord
    var counts = []

    count_len.times {
        var b = str_shift(\str).ord
        var l = Num(unpack('N', 4.of { str_shift(\str) }.join))
        counts << [b, l]
    }

    var chunks = []
    var bits = str.ascii2bin

    for b,len in (counts) {
        len > 0 || next
        chunks << bits.substr(0, b*len).slices(b)...
        bits.substr!(b*len)
    }

    chunks.map { Num(_, 2) }
}

var integers = 1000.of { .irand }
var str      = encode_integers(integers.clone)

say ("Encoded length: ", str.len)
say ("Rawdata length: ", integers.join(' ').len)

var decoded = decode_integers(str)

assert_eq(integers, decoded)

__END__
Encoded length: 1158
Rawdata length: 3621
