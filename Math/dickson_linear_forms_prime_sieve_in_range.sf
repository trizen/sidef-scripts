#!/usr/bin/ruby

# Sieve for linear forms primes of the form `a_1*m + b_1`, `a_2*m + b_2`, ..., `a_k*m + b_k`.
# Inspired by the PARI program by David A. Corneth from OEIS A372238.

# See also:
#   https://oeis.org/A088250
#   https://oeis.org/A318646
#   https://oeis.org/A372238/a372238.gp.txt
#   https://en.wikipedia.org/wiki/Dickson%27s_conjecture

func remainders_for_primes(primes, terms) is cached {

    var res = [[0, 1]]

    primes.each {|p|

        var rems = (^p -> grep {|m| terms.none {|k| p.is_ntf(k[0]*m + k[1]) } })

        if (rems.is_empty) {
            rems = [0]
        }

        var nres = []
        res.each {|r|
            rems.each {|rem|
                nres << [Math.chinese(r, [rem, p]), lcm(p, r[1])]
            }
        }

        res = nres
    }

    res.map { .head }.sort
}

func linear_form_primes_in_range(A, B, terms) {

    var primes = terms.len.pn_primes

    var r = remainders_for_primes(primes, terms)
    var d = r.diffs
    var s = primes.prod

    while (!d.is_empty && (d[0] == 0)) {
        d.shift
    }

    d << (r[0] + s - r[-1])

    var m      = r[0]
    var d_len  = d.len

    with (d.sum) {|d_sum|
        m += d_sum*idiv(A, d_sum)
    }

    var j = 0

    while (m < A) {
        m += d[j++ % d_len]
    }

    var arr = []

    loop {

        if (terms.all {|k| is_prime(k[0]*m + k[1]) }) {
            arr << m
        }

        m += d[j++ % d_len]
        break if (m > B)
    }

    return arr
}

assert_eq(linear_form_primes_in_range(1, 41, [[1, 41]]), %n[2, 6, 12, 18, 20, 26, 30, 32, 38])
assert_eq(linear_form_primes_in_range(1, 50, [[1, 1]]), %n[1, 2, 4, 6, 10, 12, 16, 18, 22, 28, 30, 36, 40, 42, 46])
assert_eq(linear_form_primes_in_range(1, 100, [[1,1], [2,1]]), %n[1, 2, 6, 18, 30, 36, 78, 96])
assert_eq(linear_form_primes_in_range(1, 1000, [[1,1],[2,1],[3,1]]), %n[2, 6, 36, 210, 270, 306, 330, 336, 600, 726])
assert_eq(linear_form_primes_in_range(1, 10000, [[1,1],[2,1],[3,1],[4,1]]), %n[330, 1530, 3060, 4260, 4950, 6840])
assert_eq(linear_form_primes_in_range(1, 12000,  [[1,1],[2,1],[3,1],[4,1],[5,1]]), %n[10830])
assert_eq(linear_form_primes_in_range(9538620, 9993270,  [[1,1],[2,1],[3,1],[4,1],[5,1]]), %n[9538620, 9780870, 9783060, 9993270])
assert_eq(linear_form_primes_in_range(9538620+1, 9993270,  [[1,1],[2,1],[3,1],[4,1], [5,1]]), %n[9780870, 9783060, 9993270])

assert_eq(linear_form_primes_in_range(1, 1000,  [[1,-1],[2,-1],[3,-1]]), %n[4, 6, 24, 30, 84, 90, 174, 234, 240, 294, 420, 660, 954])
assert_eq(linear_form_primes_in_range(1, 10000, [[1,-1],[2,-1],[3,-1],[4,-1]]), %n[6, 90, 1410, 1890])
assert_eq(linear_form_primes_in_range(1, 500, [[2,-1],[4,-1],[6,-1]]), %n[2, 3, 12, 15, 42, 45, 87, 117, 120, 147, 210, 330, 477])
assert_eq(linear_form_primes_in_range(1, 500, [[2,1],[4,3],[8,7]]), %n[2, 5, 20, 44, 89, 179, 254, 359])
assert_eq(linear_form_primes_in_range(1, 500, [[2,-1],[4,-1],[8,-1]]), %n[3, 6, 21, 45, 90, 180, 255, 360])
assert_eq(linear_form_primes_in_range(1, 500, [[2,-1],[4,-1],[8,-1],[16,-1]]), %n[3, 45, 90, 180, 255])
assert_eq(linear_form_primes_in_range(1, 500, [[17,1],[23,5]]), %n[18, 24, 66, 126, 186, 216, 378, 384, 426])

assert_eq(linear_form_primes_in_range(1, 500, [[17,4],[15,-8],[19, 2]]), %n[5, 9, 11, 65, 75, 105, 125, 159, 191, 221, 231, 291, 341, 369, 419, 461, 471, 479])
assert_eq(linear_form_primes_in_range(1, 500, [[17,4],[15,+8],[19, 2]]), %n[5, 11, 45, 65, 105, 159, 161, 189, 221, 275, 291, 299, 431, 479])

say "=> The least Chernick's \"universal form\" Carmichael number with n prime factors"

for n in (3..8) {

    var terms = [6, 12, 1 .. n-2 -> map{|k| 9 * 2**k }...].map { [_, 1] }

    var A = 1
    var B = 2*A

    loop {

        var arr = linear_form_primes_in_range(A, B, terms).grep {|k| k.valuation(2) >= n-4 }

        if (arr) {
            say "a(#{n}) = #{arr[0]}"
            break
        }

        A = B+1
        B = 2*A
    }
}

__END__
=> The least Chernick's "universal form" Carmichael number with n prime factors
a(3) = 1
a(4) = 1
a(5) = 380
a(6) = 380
a(7) = 780320
a(8) = 950560
