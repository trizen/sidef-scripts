#!/usr/bin/ruby

# Daniel "Trizen" È˜uteu
# Date: 15 September 2018
# Edit: 25 October 2018
# https://github.com/trizen

# Variation of the continued-fraction factorization method, but using the mediant inequality to approximate sqrt(n).

# See also:
#   https://en.wikipedia.org/wiki/Continued_fraction_factorization
#   https://en.wikipedia.org/wiki/Mediant_(mathematics)#Properties

func gauss_elimination(A, n) {

    var m = A.end
    var I = (m+1).of {|i| 1 << i }

    var nrow = -1

    for col in (0 .. min(m, n)) {
        var npivot = -1

        for row in (nrow+1 .. m) {
            if (A[row].bit(col)) {
                npivot = row
                nrow++
                break
            }
        }

        next if (npivot < 0)

        if (npivot != nrow) {
            A.swap(npivot, nrow)
            I.swap(npivot, nrow)
        }

        for row in (nrow+1 .. m) {
            if (A[row].bit(col)) {
                A[row] ^= A[nrow]
                I[row] ^= I[nrow]
            }
        }
    }

    return I
}

func farey_factorization (n) {

    # Check for primes and negative numbers
    return []  if (n <= 1)
    return [n] if n.is_prime

    # Check for perfect powers
    if (n.is_power) {

        var root  = n.perfect_root
        var power = n.perfect_power

        var factors = __FUNC__(root)

        return (factors * power -> sort)
    }

    # Check for divisibility by 2
    if (n.is_even) {

        var v = n.valuation(2)
        var t = n>>v

        var factors = v.of(2)

        if (t > 1) {
            factors += __FUNC__(t)
        }

        return factors
    }

    var resolve_factor = {|a,b|
        var g = gcd(a - b.isqrt, n)

        if ((g > 1) && (g < n)) {
            return (
                __FUNC__(g) +
                __FUNC__(n/g) -> sort
            )
        }
    }

    var x = n.isqrt

    var a1 = x
    var a2 = 1

    var b1 = x+1
    var b2 = 1

    var B = 3*int(exp(sqrt(log(n) * log(log(n))) / 2))        # B-smooth limit

    var factor_base  = B.primes.grep {|p| (p <= 2) || (kronecker(n, p) == 1) }
    var factor_prod  = factor_base.prod
    var factor_index = Hash(factor_base ~Z ^factor_base -> flat...)

    var L = factor_base.len+1

    var Q = []
    var A = []

    func exponent_signature(factors) {
        var sig = 0

        for p,e in factors {
            sig.setbit!(factor_index{p}) if e.is_odd
        }

        return sig
    }

    while (A.len <= L) {

        # Mediant inequality
        var m = (a1 + b1)/(a2 + b2)

        if (m*m < n) {
            (a1, a2) = m.nude
        }
        else {
            (b1, b2) = m.nude
        }

        # There is a good chance that `numerator(m)^2 (mod n)` is B-smooth
        var t = (m.numerator % n)
        var v = (t*t % n)

        # If `v` is a square, then `gcd(t - sqrt(v), n)` is divisor of `n`.
        resolve_factor(t, v) if v.is_square

        if (n-v < v) {
            v = (n - v)
            resolve_factor(t, v) if v.is_square
        }

        if (v.is_smooth_over_prod(factor_prod)) {

            var v_factors = v.factor_exp

            if (v_factors) {
                A << exponent_signature(v_factors)
                Q << [t, v]
            }
        }
    }

    if (A.len < L) {
        A += (L - A.end + 1 -> of(0))
    }

    var I  = gauss_elimination(A, L-1)
    var LR = (A.end - A.rindex_by { !.is_zero })

    for solution in (I.last(LR)) {

        var X = 1
        var Y = 1

        for i in (^Q) {

            if (solution.bit(i)) {

                X *= Q[i][0] %= n      #=
                Y *= Q[i][1]

                resolve_factor(X, Y)
            }
        }
    }

    return [n]
}

var composites = (ARGV ? ARGV.map{.to_i} : {|k| irand(2, 1<<k) }.map(2..60) )

for n in (composites) {

    var factors = farey_factorization(n)
    assert_eq(factors.prod, n)

    if (factors.all { .is_prime }) {
        say "#{n} = #{factors.join(' * ')}"
    }
    else {
        say "#{n} = #{factors.join(' * ')} (incomplete factorization)"
    }
}
