#!/usr/bin/ruby

# The elliptic-curve factorization method (ECM), due to Hendrik Lenstra.

# Algorithm presented in the bellow video:
#   https://www.youtube.com/watch?v=2JlpeQWtGH8

# See also:
#   https://en.wikipedia.org/wiki/Lenstra_elliptic-curve_factorization

func ecm(N, arange=100, plimit=10000) {

    return N            if N.is_prime
    return N.prime_root if N.is_prime_power

    var primes = plimit.primes

    for a in range(-arange, arange) {
        var x = 0
        var y = 1

        primes.each {|B|
            var k = B**plimit.ilog(B)

            var (xn, yn)
            var (sx, sy, t) = (x, y, k)

            var first = true

            while (t > 0) {

                if (t.is_odd) {
                    if (first) {
                        (xn, yn) = (sx, sy)
                        first = false
                    }
                    else {
                        var d = gcd(sx-xn, N)

                        if (d > 1) {
                            break if (d == N)
                            return d
                        }

                        var u     = invmod(sx-xn, N)
                        var L     = (u*(sy-yn) % N)
                        var x_sum = ((L*L - xn - sx) % N)

                        yn = ((L*(xn - x_sum) - yn) % N)
                        xn = x_sum
                    }
                }

                var d = gcd(2*sy, N)

                if (d > 1) {
                    break if (d == N)
                    return d
                }

                var u  = invmod(2*sy, N)
                var L  = (u*(3*sx*sx + a) % N)
                var x2 = ((L*L - 2*sx) % N)

                sy = ((L*(sx - x2) - sy) % N)
                sx = x2

                t >>= 1
            }
            (x, y) = (xn, yn)
        }
    }

    return nil
}

say ecm(14304849576137459)
#say ecm(2**128 + 1)         # takes ~13 seconds
