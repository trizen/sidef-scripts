#!/usr/bin/ruby

# Simple implementation of Eisenstein integers.

# See also:
#   https://en.wikipedia.org/wiki/Eisenstein_integer

class EisensteinInteger(a, b) {   # represents: a + b*w, where w = (-1 + i*sqrt(3))/2

    method to_s {
        "Eisenstein(#{a}, #{b})"
    }

    method ==(EisensteinInteger c) {
        (a == c.a) && (b == c.b)
    }

    method add (EisensteinInteger z) {
        var (c,d) = (z.a, z.b)
        EisensteinInteger(a+c, b+d)
    }

    __CLASS__.alias_method(:add, '+')

    method norm {
        a*a - a*b + b*b
    }

    method mul (EisensteinInteger z) {
        var (c,d) = (z.a, z.b)
        EisensteinInteger(a*c - b*d, b*c + a*d - b*d)
    }

    __CLASS__.alias_method(:mul, '*')

    method mod (Number m) {
        EisensteinInteger(a % m, b % m)
    }

    __CLASS__.alias_method(:mod, '%')

    method pow(Number n) {
        var x = self
        var c = EisensteinInteger(1, 0)

        for bit in (n.digits(2)) {
            c *= x if bit
            x *= x
        }

        return c
    }

    __CLASS__.alias_method(:pow, '**')

    method powmod(Number n, Number m) {

        var x = self
        var c = EisensteinInteger(1, 0)

        for bit in (n.digits(2)) {
            (c *= x) %= m if bit        #=
            (x *= x) %= m               #=
        }

        return c
    }
}

# Integers (a,b) such that a^2 - a*b + b^2 give the powers of 7.
with (EisensteinInteger(2,3)) {|q|
    say 15.of { q.pow(_).a }        #=> [1, 2, -5, -19, 16, 149, 37, -1006, -1265, 5777, 14632, -25807, -128231, 52418, 950035]
    say 15.of { q.pow(_).b }        #=> [0, 3, 3, -18, -39, 87, 360, -249, -2769, -1026, 18357, 25539, -102960, -281733, 438987]
}

var n = (274177-1)
var m = (2**64 + 1)

with (EisensteinInteger(2,3)) {|q|
    var r = q.powmod(n, m)
    say gcd(r.a-1, m)       #=> 2741177
    say gcd(r.b, m)         #=> 2741177
}
