#!/usr/bin/ruby

# A non-practical (but interesting) primality testing function, using the gamma function and a closed-form of the Fourier series for the floor function.

# This is equivalent with Wilson's theorem:
#    (p-1)! = p-1 (mod p)

# See also:
#   https://en.wikipedia.org/wiki/Wilson's_theorem
#   https://en.wikipedia.org/wiki/Floor_and_ceiling_functions#Continuity_and_series_expansions

local Number!PREC = *("3000")

const π = Num.pi
const i = Num.i

func is_gamma_prime_1(n) {
   (Γ(n) - n*(Γ(n)/n - 1/2 + ((i*(log(1 - exp(2*i*π*Γ(n)/n)) - log(exp(-2*i*π*Γ(n)/n) * (-1 + exp(2*i*π*Γ(n)/n)))) / (2*π))))) / (n-1)
}

func is_gamma_prime_2(n) {
    (n*(i*log(1 - exp(-(2*i*π*Γ(n))/n)) - i*log(1 - exp((2*i*π*Γ(n))/n)) + π))/(2*π*(n-1))
}

func is_gamma_prime_3(n) {
    (i*n*(log(exp(-(2*i*π*((n-1)!/n))) * (-1 + exp((2*i*π*((n-1)!/n))))) - i*(π - i*log(1 - exp((2*i*π*((n-1)!/n)))))))/(2*π*(n-1))
}

# Display the primes bellow 100
say (1..100 -> grep { is_gamma_prime_1(_) =~= 1 })
say (1..100 -> grep { is_gamma_prime_2(_) =~= 1 })
say (1..100 -> grep { is_gamma_prime_3(_) =~= 1 })
