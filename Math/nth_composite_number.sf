#!/usr/bin/ruby

# Daniel "Trizen" È˜uteu
# Date: 06 June 2021
# https://github.com/trizen

# Return the n-th composite number, using binary search and the prime counting function.

# See also:
#   https://oeis.org/A002808

func nth_composite(n) {

    n == 0 && return 1      # not composite, but...
    n <= 0 && return NaN
    n == 1 && return 4

    # Lower and upper bounds from A002808 (for n >= 4).
    var min = int(n + n/log(n) + n/(log(n)**2))
    var max = int(n + n/log(n) + (3*n)/(log(n)**2))

    if (n < 4) {
        min = 4;
        max = 8;
    }

    #~ var k = bsearch_le(min, max, {|k|
        #~ (k - prime_count(k) - 1) <=> n
    #~ })

    var k = 0

    loop {

        k = (min + max)>>1

        given ((k - prime_count(k) - 1) <=> n) {
            when (1) {
                max = k-1
            }
            when (-1) {
                min = k+1
            }
            when (0) {
                break
            }
        }
    }

    if (k.is_prime) {
        --k
    }

    return k
}

say 25.of(nth_composite)
