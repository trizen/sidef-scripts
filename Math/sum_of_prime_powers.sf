#!/usr/bin/ruby

# Sublinear algorithm for computing the sum of prime powers <= n, based on the sublinear algorithm for computing the sum of primes <= n.

# See also:
#   https://oeis.org/A074793

# PARI/GP program:
#`(

f(n) = if(n <= 1, return(0)); my(r=sqrtint(n)); my(V=vector(r, k, n\k)); my(L=n\r-1); V=concat(V, vector(L, k, L-k+1)); my(T=vector(#V, k, V[k]*(V[k]+1)\2)); my(S=Map(matrix(#V, 2, x, y, if(y==1, V[x], T[x])))); forprime(p=2, r, my(sp=mapget(S, p-1), p2=p*p); for(k=1, #V, if(V[k] < p2, break); mapput(S, V[k], mapget(S, V[k]) - p*(mapget(S, V[k]\p) - sp)))); mapget(S, n)-1;
g(n, j=2) = if(n <= 1, return(0)); my(r=sqrtint(n)); my(V=vector(r, k, n\k)); my(F(n, j)=(subst(bernpol(j+1), x, n+1) - subst(bernpol(j+1), x, 1)) / (j+1)); my(L=n\r-1); V=concat(V, vector(L, k, L-k+1)); my(T=vector(#V, k, F(V[k], j))); my(S=Map(matrix(#V, 2, x, y, if(y==1, V[x], T[x])))); forprime(p=2, r, my(sp=mapget(S, p-1), p2=p*p); for(k=1, #V, if(V[k] < p2, break); mapput(S, V[k], mapget(S, V[k]) - p^j*(mapget(S, V[k]\p) - sp)))); mapget(S, n)-1;
a(n) = my(s=0); forprime(p=2, sqrtnint(n,3), s += (p^(logint(n, p)+1) - 1)/(p-1) - p - 1); f(n) + g(sqrtint(n)) - g(sqrtnint(n, 3)) + s;
b(n) = my(s=0); forprime(p=2, sqrtint(n), s += (p^(logint(n, p)+1) - 1)/(p-1) - p - 1); f(n) + s;

)

func sum_of_primes(n, j=1) {

    return 0 if (n <= 1)

    var r = n.isqrt
    var V = (1..r -> map {|k| idiv(n,k) })
    V << range(V.last-1, 1, -1).to_a...

    var S = Hash(V.map{|k| (k, faulhaber(k,j)) }...)

    for p in (2..r) {
        S{p} > S{p-1} || next
        var sp = S{p-1}
        var p2 = p*p
        V.each {|v|
            break if (v < p2)
            S{v} -= ipow(p,j)*(S{idiv(v,p)} - sp)
        }
    }

    return S{n}-1
}

func sum_of_prime_powers(n) {

    # a(n) = Sum_{p prime <= n} p
    # b(n) = Sum_{n^(1/3) < p prime <= n^(1/2)} p^2
    # c(n) = Sum_{p prime <= n^(1/3)} f(p)

    # sum_of_prime_powers(n) = a(n) + b(n) + c(n)

    var sr = n.isqrt
    var cr = n.icbrt

    var ps1 = sum_of_primes(n)
    var ps2 = (sum_of_primes(sr, 2) - sum_of_primes(cr, 2))

    # f(p) = sum(1..n.ilog(p), {|k| p**k }) - p
    #      = (1 - p**(n.ilog(p)+1))/(1-p) - p - 1

    var ps3 = cr.primes.sum {|p|
        (p**(n.ilog(p)+1) - 1)/(p-1) - p - 1
    }

    ps1 + ps2 + ps3
}

say sum_of_prime_powers(1e5)        #=> 457028152
say sum_of_prime_powers(43**3)      #=> 294752679

for k in (1..100) {
    var n = 1e3.irand
    assert_eq(sum_of_prime_powers(n), n.prime_powers.sum)
}
