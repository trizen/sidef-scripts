#!/usr/bin/ruby

# Daniel "Trizen" È˜uteu
# Date: 05 January 2020
# https://github.com/trizen

# Prove the primality of a number, using the Pocklington primality test recursively.

# See also:
#   https://en.wikipedia.org/wiki/Pocklington_primality_test
#   https://en.wikipedia.org/wiki/Primality_certificate
#   http://mathworld.wolfram.com/PrattCertificate.html

func pocklington_pratt_primality_test(n, lim=2**64) is cached {

    if ((n <= lim) || (n <= 2)) {
        return n.is_prime
    }

    n.is_prob_prime || return false

    say ":: Proving primality of: #{n}"

    var D = n-1
    var f = D.trial_factor(1e7)
    var B = f.pop
    var S = n.isqrt

    if (B <= lim) {
        if (B.is_prime) {
            f << B
            B = 1
        }
    }
    elsif (__FUNC__(B)) {
        f << B
        B = 1
    }

    loop {
        var A = f.prod

        if (A>S && is_coprime(A, B)) {
            return f.uniq.grep{|p| p > 2 }.all {|p|
                2..1000 -> any {
                    var a = irand(2, D)
                    say [a, p]
                    powmod(a, D, n) == 1 || return false
                    is_coprime(powmod(a, D/p, n) - 1, n)
                }
            }
        }

        var e = B.ecm_factor.grep(__FUNC__)
        f += e
        B /= e.prod
    }
}

say pocklington_pratt_primality_test(3791200232251482865919745722303442788615510538727)

__END__
:: Proving primality of: 3791200232251482865919745722303442788615510538727
:: Proving primality of: 669202163266021764588091852951949336890369
:: Proving primality of: 21454742399962033695575563
[2, 3]
[3, 3]
[2, 13]
[2, 29]
[2, 31]
[2, 1410342851]
[2, 216942334171]
[2, 3]
[2, 3384476988721]
[2, 21454742399962033695575563]
[2, 3]
[3, 3]
[2, 7]
[2, 134887]
[2, 669202163266021764588091852951949336890369]
true
