#!/usr/bin/ruby

# Daniel "Trizen" È˜uteu
# Date: 05 January 2020
# https://github.com/trizen

# Prove the primality of a number, using the Pocklington primality test recursively.

# See also:
#   https://en.wikipedia.org/wiki/Pocklington_primality_test
#   https://en.wikipedia.org/wiki/Primality_certificate
#   http://mathworld.wolfram.com/PrattCertificate.html

func pocklington_pratt_primality_test(n, lim=2**64) is cached {

    if ((n <= lim) || (n <= 2)) {
        return n.is_prime
    }

    n.is_prob_prime || return false

    say ":: Proving primality of: #{n}"

    var D = n-1
    var f = D.trial_factor(1e6)
    var B = f.pop
    var S = n.isqrt

    if (__FUNC__(B)) {
        f << B
        B = 1
    }

    loop {
        var A = f.prod

        if (A>S && is_coprime(A, B)) {
            return f.uniq.all {|p|
                1..Inf -> any {
                    var a = irand(2, D)
                    say [a, p]
                    n.is_strong_pseudoprime(a) || return false
                    is_coprime(powmod(a, D/p, n) - 1, n)
                }
            }
        }

        var e = B.ecm_factor.grep(__FUNC__)
        f += e
        B /= e.prod
    }
}

say pocklington_pratt_primality_test(115792089237316195423570985008687907853269984665640564039457584007913129603823)

__END__
:: Proving primality of: 115792089237316195423570985008687907853269984665640564039457584007913129603823
:: Proving primality of: 57896044618658097711785492504343953926634992332820282019728792003956564801911
:: Proving primality of: 2848630210554880446022254608450222949126931851754251657020267
:: Proving primality of: 3201964079152361724098258636758155557
:: Proving primality of: 1202684276868524221513588244947
[519690671862515795792921724757, 2]
[230713116547143368816700277213, 2]
[1054209382389936126536095836007, 2]
[22098313977885203550200116568, 3]
[1092400285282407863856139993299, 192697]
[790952673775827805947429116822, 5829139]
[512820000703483124919862994498, 59483944987587859]
[453729148009647274213082023462593895, 2]
[1525007047924380364871235940809335170, 2]
[2146225400033388888092376932642196873, 13]
[1936483429569868696888212077261230129, 51199]
[768805988659665942115668811349024999, 1202684276868524221513588244947]
[1261336471201142650185882026551459100588064778714327631190788, 2]
[644640979793796539648064548757152188619857873799261312115426, 2]
[138393844849876872174685879335547583495100367051248381537257, 2]
[2508082238877402390108209106156956839904230000328971735975181, 2]
[1990871988116158835012274808892275903468342318532021521743568, 7]
[1533979909674255193507590758539703553428016388652724687858579, 71]
[576196881647488385412751763910497584778521392424350288158652, 397]
[1165744853749946141812307251955930259442787039436752885527013, 22483]
[1236259000920622741528359363721807550649607719464616832766890, 100274029791527]
[2142926580966800504705858587110097273728486533017376861428999, 3201964079152361724098258636758155557]
[28362674724504327361232353413379391004248382910104829813769225485908320746913, 2]
[4896936857413017733720739580736023598302140828680385675705284448627563477547, 5]
[33217613885297103095979072386410657718673534787713653876324264320528503343917, 19]
[30326354560613641774924064843748659939398737931137478947279672601019566702243, 106969315701167]
[52872133896906975489749796319791146199945774743280018405987405839849244029900, 2848630210554880446022254608450222949126931851754251657020267]
[48271414528513313052042778621812748613327792641947565146667500148618870877789, 2]
[8651451412522872776362076187951991306379757767954997200839065122902829668515, 57896044618658097711785492504343953926634992332820282019728792003956564801911]
true
