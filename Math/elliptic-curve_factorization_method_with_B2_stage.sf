#!/usr/bin/ruby

# The elliptic-curve factorization method (ECM), due to Hendrik Lenstra, with B2 stage.

# Code translated from the SymPy file "ntheory/ecm.py".

class Point(x_cord, z_cord, a_24, mod) {

    -> add(Q, diff) {
        var u = mulmod(submod(x_cord, z_cord, mod), addmod(Q.x_cord, Q.z_cord, mod), mod)
        var v = mulmod(addmod(x_cord, z_cord, mod), submod(Q.x_cord, Q.z_cord, mod), mod)
        var (add, subt) = (addmod(u, v, mod), submod(u, v, mod))
        var new_x_cord = mulmod(diff.z_cord, mulmod(add, add, mod), mod)
        var new_z_cord = mulmod(diff.x_cord, mulmod(subt, subt, mod), mod)
        return Point(new_x_cord, new_z_cord, a_24, mod)
    }

    -> double {
        var u = powmod(addmod(x_cord, z_cord, mod), 2, mod)
        var v = powmod(submod(x_cord, z_cord, mod), 2, mod)
        var diff = submod(u, v, mod)
        var new_x_cord = mulmod(u, v, mod)
        var new_z_cord = mulmod(diff, muladdmod(a_24, diff, v, mod), mod)
        return Point(new_x_cord, new_z_cord, a_24, mod)
    }

    -> mont_ladder(k) {

        var Q = self
        var R = self.double()

        for i in (k.as_bin.substr(1).chars) {
            if  (i `eq` '1') {
                Q = R.add(Q, self)
                R = R.double()
            }
            else {
                R = Q.add(R, self)
                Q = Q.double()
            }
        }
        return Q
    }
}

func ecm_one_factor(n, B1=10000, B2=B1*100, max_curves=200, seed = nil) {

    if (B1.is_odd || B2.is_odd) {
        die "The bounds must be both even integers"
    }

    if (defined(seed)) {
        iseed(seed)
    }

    n.is_prime && return n

    var D = min(B2.isqrt, (B1>>1)-1)
    var beta = []
    var S = []

    var k = B1.primes.prod {|p|
        p**B1.ilog(p)
    }

    var deltas_list = []
    for r in (range(B1 + 2*D, B2 + 2*D, 4*D)) {
        var deltas = []
        for q in (primes(r - 2*D, r + 2*D)) {
            deltas << ((abs(q - r) - 1) >> 1)
        }
        deltas_list << deltas.uniq
    }

    max_curves.times {

        # Suyama's parametrization
        var sigma = urand(6, n - 1)
        var u = mulsubmod(sigma, sigma, 5, n)
        var v = mulmod(sigma, 4, n)
        var u_3 = powmod(u, 3, n)

        var inv = invmod(mulmod(mulmod(u_3, v, n), 16, n), n) || return gcd(lcm(u_3, v), n)
        var a24 = mulmod(mulmod(powmod(submod(v, u, n), 3, n), muladdmod(3, u, v, n), n), inv, n)

        var Q = Point(u_3, powmod(v, 3, n), a24, n)
        Q = Q.mont_ladder(k)
        var g = gcd(Q.z_cord, n)

        # Stage 1 factor
        if (g.is_ntf(n)) {  # g is a non-trivial factor of n
            return g
        }

        # Stage 1 failure. Q.z = 0, Try another curve
        elsif (g == n) {
            next
        }

        # Stage 2 - Improved Standard Continuation
        S[0] = Q
        var Q2 = Q.double()
        S[1] = Q2.add(Q, Q)
        beta[0] = mulmod(S[0].x_cord, S[0].z_cord, n)
        beta[1] = mulmod(S[1].x_cord, S[1].z_cord, n)

        for d in (2 ..^ D) {
            S[d]    = S[d-1].add(Q2, S[d-2])
            beta[d] = mulmod(S[d].x_cord, S[d].z_cord, n)
        }

        g = 1
        var W = Q.mont_ladder(4*D)
        var T = Q.mont_ladder(B1 - 2*D)
        var R = Q.mont_ladder(B1 + 2*D)

        for deltas in (deltas_list) {
            var alpha = mulmod(R.x_cord, R.z_cord, n)
            for delta in (deltas) {
                g = mulmod(
                        addmod(
                            submod(
                                mulmod(
                                    submod(R.x_cord, S[delta].x_cord, n),
                                    addmod(R.z_cord, S[delta].z_cord, n), n),
                                alpha, n),
                        beta[delta], n),
                    g, n)
            }
            (T, R) = (R, R.add(W, T))
        }

        g = gcd(n, g)

        # Stage 2 Factor found
        if (g.is_ntf(n)) {
            return g
        }
    }

    # ECM failed, Increase the bounds
    die "Increase the bounds"
}

# Parameters from:
#   https://www.rieselprime.de/ziki/Elliptic_curve_method

var ECM_PARAMS = [

    # d      B1     curves
    [5,  200,        4],
    [10, 360,        7],
    [13, 600,        20],
    [15, 2000,       10],
    [20, 11000,      90],
    [25, 50000,      300],
    [30, 250000,     700],
    [35, 1000000,    1800],
    [40, 3000000,    5100],
    [45, 11000000,   10600],
    [50, 43000000,   19300],
    [55, 110000000,  49000],
    [60, 260000000,  124000],
    [65, 850000000,  210000],
    [70, 2900000000, 340000],
]

func ecm(n, B1=nil, B2=nil, max_curves=nil, seed = nil) {

    n <= 1 && die "n must be greater than 1"

    if (!defined(B1)) {
        for d, B1, curves in ECM_PARAMS {
            #say ":: Trying to find a prime factor with #{d} digits using B1 = #{B1} with #{curves} curves"
            var f = try { __FUNC__(n, B1, B1*20, curves, seed) }
            return f if defined(f)
        }
    }

    var f = n.trial_factor(100_000)
    n = f.pop
    var factors = Set(f...)

    if (defined(seed)) {
        iseed(seed)
    }

    while(n > 1) {
        var factor = try   { ecm_one_factor(n, B1, B2, max_curves, seed) }
                     catch {|msg| die msg }
        factors << factor
        n.remdiv!(factor)
    }

    var final_factors = Set()
    for factor in (factors) {
        if (factor.is_prime) {
            final_factors << factor
        }
        else {
            final_factors << __FUNC__(factor, B1, B2, max_curves, seed)...
        }
    }
    return final_factors.sort
}

const SEED = 42

say ecm(314159265358979323,             seed:SEED)    #=> [317213509, 990371647]
say ecm(14304849576137459,              seed:SEED)    #=> [16100431, 888476189]
say ecm(9804659461513846513,            seed:SEED)    #=> [4641991, 2112166839943]
say ecm(25645121643901801,              seed:SEED)    #=> [5394769, 4753701529]
say ecm(17177619065692036843,           seed:SEED)    #=> [2957613037, 5807933239]
say ecm(195905123644566489241411490581, seed:SEED)    #=> [259719190596553, 754295911652077]

say ecm(2**64 + 1, seed:SEED)       #=> [274177, 67280421310721]
say ecm(2**128 - 1, seed:SEED)      #=> [3, 5, 17, 257, 641, 65537, 274177, 6700417, 67280421310721]
#say ecm(2**128 + 1, seed:SEED)     # takes ~26 seconds
