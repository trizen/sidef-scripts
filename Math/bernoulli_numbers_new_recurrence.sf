#!/usr/bin/ruby

# Author: Daniel "Trizen" È˜uteu
# Date: 18 February 2018
# https://github.com/trizen

# A new recurrence for computing Bernoulli numbers.

# Formula:
#  a(0) = 1
#  a(n) = Sum_{k=0..n-1} (-1)^(n+k+1) * a(k) / (n - k + 1)!

# Which gives us the nth-Bernoulli number, B_n, as:
#   B_n = a(n) * n!

# See also:
#   https://en.wikipedia.org/wiki/Bernoulli_number

func a((0)) { 1 }

func a(n) is cached {
    sum(0..^n, {|k| (-1)**(n+k+1) * a(k) / (n - k + 1)! })
}

for n in (0..60 `by` 2) {
    printf("B(%2d) = %50s / %s\n", n, a(n)*n! -> nude)
}
