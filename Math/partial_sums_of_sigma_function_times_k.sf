#!/usr/bin/ruby

# Author: Daniel "Trizen" Șuteu
# Date: 10 Novermber 2018
# https://github.com/trizen

# A new generalized algorithm with O(sqrt(n)) complexity for computing the partial-sums of `k * sigma_j(k)`, for `1 <= k <= n`:
#
#   Sum_{k=1..n} k * sigma_j(k)
#
# for any fixed j >= 0.

# Example: `a(n) = Sum_{k=1..n} k * sigma(k)`
#   a(10^1)  = 622
#   a(10^2)  = 558275
#   a(10^3)  = 549175530
#   a(10^4)  = 548429473046
#   a(10^5)  = 548320905633448
#   a(10^6)  = 548312690631798482
#   a(10^7)  = 548311465139943768941
#   a(10^8)  = 548311366911386862908968
#   a(10^9)  = 548311356554322895313137239
#   a(10^10) = 548311355740964925044531454428

# For m>=0 and j>=1, we have the following asymptotic formula:
#   Sum_{k=1..n} k^m * sigma_j(k) ~ zeta(j+1)/(j+m+1) * n^(j+m+1)

# See also:
#   https://en.wikipedia.org/wiki/Divisor_function
#   https://en.wikipedia.org/wiki/Faulhaber%27s_formula
#   https://en.wikipedia.org/wiki/Bernoulli_polynomials
#   https://trizenx.blogspot.com/2018/08/interesting-formulas-and-exercises-in.html

func fast_sigma_partial_sum(n, m) {       # O(sqrt(n)) complexity

    var total = 0

    var s = n.isqrt
    var u = floor(n / (s + 1))

    for k in (1 .. s) {
        total += (k*(k+1) * (faulhaber_sum(floor(n/k), m+1) - faulhaber_sum(floor(n/(k+1)), m+1)))
    }

    for k in (1 .. u) {
        total += (k**(m+1) * floor(n/k) * floor(1 + n/k))
    }

    return total/2
}

func sigma_partial_sum(n, m) {      # just for testing
    sum(1..n, {|k| k * k.sigma(m) })
}

for m in (0..10) {

    var n = 1000.irand

    var t1 = sigma_partial_sum(n, m)
    var t2 = fast_sigma_partial_sum(n, m)

    assert_eq(t1, t2)

    say "Sum_{k=1..#{n}} k * σ_#{m}(k) = #{t2}"
}

__END__
Sum_{k=1..551} k * σ_0(k) = 1058514
Sum_{k=1..809} k * σ_1(k) = 290297164
Sum_{k=1..321} k * σ_2(k) = 3209932693
Sum_{k=1..986} k * σ_3(k) = 202258785838576
Sum_{k=1..313} k * σ_4(k) = 164018916941195
Sum_{k=1..427} k * σ_5(k) = 379193794841188452
Sum_{k=1..740} k * σ_6(k) = 11395575344463082324068
Sum_{k=1..685} k * σ_7(k) = 3728876523181346772314835
Sum_{k=1..320} k * σ_8(k) = 1145904585252138402327241
Sum_{k=1..712} k * σ_9(k) = 2186109706931307510936304724547
Sum_{k=1..741} k * σ_10(k) = 2303356549250371962763139803631148
