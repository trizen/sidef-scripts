#!/usr/bin/ruby

# Pollard's rho integer factorization algorithm.

# See also:
#   https://en.wikipedia.org/wiki/Pollard%27s_rho_algorithm

func rho_factor(n) {

    func f(x) {      # can be any polynomial
        powmod(x, 2, n) + 1
    }

    var a0 = 1
    var a1 = f(a0)
    var a2 = f(a1)

    while (n `is_coprime` a2-a1) {
        a1 = f(a1)
        a2 = f(f(a2))
    }

    var g = gcd(n, a2-a1)
    return [n/g, g]
}

say rho_factor(503*863)                   #=> [503, 863]
say rho_factor(33670570905491953)         #=> [930901771, 36169843]
say rho_factor(314159265358979323)        #=> [317213509, 990371647]
say rho_factor(242363923520394591022973)  #=> [308054141267, 786757556719]
