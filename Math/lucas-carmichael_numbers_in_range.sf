#!/usr/bin/ruby

# Daniel "Trizen" È˜uteu
# Date: 29 August 2022
# https://github.com/trizen

# Generate all the Lucas-Carmichael numbers with n prime factors in a given range [a,b]. (not in sorted order)

# See also:
#   https://en.wikipedia.org/wiki/Almost_prime
#   https://trizenx.blogspot.com/2020/08/pseudoprimes-construction-methods-and.html

# PARI/GP program (up to n):
#   lucas_carmichael_upto(n, k) = my(A=vecprod(primes(k+1))\2, B=n); (f(m, l, p, k, u=0, v=0) = my(list=List()); if(k==1, forprime(p=u, v, my(t=m*p); if((t+1)%l == 0 && (t+1)%(p+1) == 0, listput(list, t))), forprime(q = p, sqrtnint(B\m, k), my(t = m*q); my(L=lcm(l, q+1)); if(gcd(L, t) == 1, my(u=ceil(A/t), v=B\t); if(u <= v, my(r=nextprime(q+1)); if(k==2 && r>u, u=r); list=concat(list, f(t, L, r, k-1, u, v)))))); list); vecsort(Vec(f(1, 1, 3, k)));

# PARI/GP program (in range [A,B]):
#   lucas_carmichael(A, B, k) = A=max(A, vecprod(primes(k+1))\2); (f(m, l, p, k, u=0, v=0) = my(list=List()); if(k==1, forprime(p=u, v, my(t=m*p); if((t+1)%l == 0 && (t+1)%(p+1) == 0, listput(list, t))), forprime(q = p, sqrtnint(B\m, k), my(t = m*q); my(L=lcm(l, q+1)); if(gcd(L, t) == 1, my(u=ceil(A/t), v=B\t); if(u <= v, my(r=nextprime(q+1)); if(k==2 && r>u, u=r); list=concat(list, f(t, L, r, k-1, u, v)))))); list); vecsort(Vec(f(1, 1, 3, k)));

func lucas_carmichael_numbers_in_range(A, B, k, callback) {

    A = max(pn_primorial(k+1)/2, A)

    # Largest possisble prime factor for Lucas-Carmichael numbers <= B
    var max_p = B.isqrt

    func (m, L, lo, k) {

        var hi = min(max_p, idiv(B,m).iroot(k))

        if (lo > hi) {
            return nil
        }

        if (k == 1) {

            lo = max(lo, idiv_ceil(A, m))
            lo > hi && return nil

            var t = mulmod(m.invmod(L), -1, L)

            t > hi && return nil
            t += L while (t < lo)
            t > hi && return nil

            for p in (range(t, hi, L)) {
                p.is_prime || next
                with (m*p) {|n|
                    if (p.inc `divides` n.inc) {
                        callback(n)
                    }
                }
            }

            return nil
        }

        each_prime(lo, hi, {|p|
            m.is_coprime(p+1) || next
            __FUNC__(m*p, lcm(L, p+1), p+1, k-1)
        })
    }(1, 1, 3, k)

    return callback
}

# High-level implementation (unoptimized):
func lucas_carmichael_numbers_in_range_unoptimized(A, B, k, callback) {

    func F(m, L, p, k) {
        if (k == 1) {
            each_prime(max(p, ceil(A/m)), min(B.isqrt, floor(B/m)), {|q|
                if (lcm(L, q+1) `divides` (m*q + 1)) {
                    callback(m*q)
                }
            })
        }
        elsif (k >= 2) {
            for q in (primes(p, (B/m)**(1/k))) {
                if (gcd(lcm(L, q+1), m*q) == 1) {
                    F(m*q, lcm(L, q+1), q.next_prime, k-1)
                }
            }
        }
    }

    F(1, 1, 3, k)
}

# Generate all the 5-Lucas-Carmichael numbers in the range [100, 2*10^7]

var k    = 5
var from = 100
var upto = 2e7

say gather { lucas_carmichael_numbers_in_range(from, upto, k, { take(_) }) }.sort
say gather { lucas_carmichael_numbers_in_range_unoptimized(from, upto, k, { take(_) }) }.sort

__END__
[588455, 1010735, 2276351, 2756159, 4107455, 4874639, 5669279, 6539819, 8421335, 13670855, 16184663, 16868159]
