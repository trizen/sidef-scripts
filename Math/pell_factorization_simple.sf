#!/usr/bin/ruby

# Author: Daniel "Trizen" È˜uteu
# Date: 02 March 2018
# https://github.com/trizen

# A new integer factorization method, using continued fractions and square root convergents.

# Similar to solving the Pell equation:
#   x^2 - d*y^2 = 1, where `d` is known.

# See also:
#   https://en.wikipedia.org/wiki/Pell%27s_equation

func pell_factorization_simple (n) {

    # Check for primes and negative numbers
    if (n <= 1 or n.is_prime) {
        return [n]
    }

    # Check for perfect squares
    if (n.is_square) {
        return (__FUNC__(n.isqrt) * 2 -> sort)
    }

    # Check for divisibility by 2
    if (n.is_even) {

        var v = n.valuation(2)
        var t = n>>v

        var factors = v.of(2)

        if (t > 1) {
            factors += __FUNC__(t)
        }

        return factors
    }

    var x = n.isqrt
    var y = x
    var z = 1

    var (f1, f2) = (1, n)

    loop {

        y = (((x + y)  // z)*z - y)           #/
        z = ((n - y*y) // z)                  #/

        var g = gcd(f1 + f2 - 1, n)

        if ((g > 1) && (g < n)) {
            return (
                __FUNC__(n/g) +
                __FUNC__(g) -> sort
            )
        }

        (f1, f2) = (f2, (((x + y) // z)*f2 + f1) % n) #/
    }
}

for k in (2..55) {
    var n = (2**k - 1)
    var factors = pell_factorization_simple(n)

    if (factors.all { .is_prime }) {
        say "#{n} = #{factors.join(' * ')}"
    }
    else {
        say "#{n} = #{factors.join(' * ')} (incomplete factorization)"
    }

    assert_eq(factors.prod, n)
}
