#!/usr/bin/ruby

# See also:
#   https://en.wikipedia.org/wiki/Quadratic_integer

class QuadraticInteger(a, b, w = 2) {   # represents: a + b*sqrt(w), for w >= 0

    method to_s {
        "Quadratic(#{a}, #{b}, #{w})"
    }

    method ==(QuadraticInteger c) {
        (a == c.a) && (b == c.b) && (w == c.w)
    }

    method conjugate {
        QuadraticInteger(a, -b, w)
    }

    method norm {
        a*a - w*b*b
    }

    method add (QuadraticInteger z) {
        var (c,d) = (z.a, z.b)
        QuadraticInteger(a+c, b+d, w)
    }

    __CLASS__.alias_method(:add, '+')

    method mul (QuadraticInteger z) {

        # (a,b) * (c,d) = a c + a d sqrt(w) + b c sqrt(w) + b d w
        #               = Quadratic(a c + b d w, a d + b c)

        var (c,d) = (z.a, z.b)
        QuadraticInteger(a*c + b*d*w, a*d + b*c, w)
    }

    __CLASS__.alias_method(:mul, '*')

    method mod (Number m) {
        QuadraticInteger(a % m, b % m, w)
    }

    __CLASS__.alias_method(:mod, '%')

    method pow(Number n) {
        var x = self
        var c = QuadraticInteger(1, 0, w)

        for bit in (n.digits(2)) {
            c *= x if bit
            x *= x
        }

        return c
    }

    __CLASS__.alias_method(:pow, '**')

    method powmod(Number n, Number m) {

        var x = self
        var c = QuadraticInteger(1, 0, w)

        for bit in (n.digits(2)) {
            (c *= x) %= m if bit        #=
            (x *= x) %= m               #=
        }

        return c
    }
}

# Determine if a given number is probably a prime number.
func is_quadratic_pseudoprime (n, r=2) {

    return false if (n <= 1)
    return true  if (n <= 3)

    return true if (r <= 0)

    var x = QuadraticInteger(r, 1, r+2).powmod(n, n)

    x.a == r || return false

    var y = QuadraticInteger(r, -1, r+2).powmod(n, n)

    y.a == r || return false

    (x.b + y.b == n) && __FUNC__(n, r-1)
}

say is_quadratic_pseudoprime(43)    #=> true
say is_quadratic_pseudoprime(97)    #=> true

with (QuadraticInteger(1, 1, 2)) {|q|
    say 15.of { q.pow(_).a }        #=> A001333
    say 15.of { q.pow(_).b }        #=> A000129
}

with (QuadraticInteger(1, 1, 3)) {|q|
    say 15.of { q.pow(_).a }        #=> A026150
    say 15.of { q.pow(_).b }        #=> A002605
}

var n = (274177-1)
var m = (2**64 + 1)

with (QuadraticInteger(3, 4, 2)) {|q|
    var r = q.powmod(n, m)
    say gcd(r.a-1, m)       #=> 2741177
    say gcd(r.b, m)         #=> 2741177
}
