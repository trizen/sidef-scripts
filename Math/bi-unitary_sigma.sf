#!/usr/bin/ruby

# Bi-unitary sigma: sum of the bi-unitary divisors of n.

# Multiplicative with:
#   bsigma(p^e, k) = (p^(k*(e+1)) - 1)/(p^k - 1)                   if e is odd
#   bsigma(p^e, k) = (p^(k*(e+1)) - 1)/(p^k - 1) - p^(k*(e/2))     if e is even

# See also:
#   https://oeis.org/A188999

func bi_unitary_sigma(n, k=1) {
    n.factor_prod {|p,e|
        e.is_odd ? ((p**(k*(e+1)) - 1)/(p**k - 1)) : ((p**(k*(e+1)) - 1)/(p**k - 1) - p**(k*(e/2)))
    }
}

say map(1..20, {bi_unitary_sigma(_, 1)})
say map(1..20, {bi_unitary_sigma(_, 2)})
say map(1..20, {bi_unitary_sigma(_, 3)})

__END__
[1, 3, 4, 5, 6, 12, 8, 15, 10, 18, 12, 20, 14, 24, 24, 27, 18, 30, 20, 30]
[1, 5, 10, 17, 26, 50, 50, 85, 82, 130, 122, 170, 170, 250, 260, 325, 290, 410, 362, 442]
[1, 9, 28, 65, 126, 252, 344, 585, 730, 1134, 1332, 1820, 2198, 3096, 3528, 4617, 4914, 6570, 6860, 8190]
