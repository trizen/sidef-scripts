#!/usr/bin/ruby

# Daniel "Trizen" È˜uteu
# Date: 26 October 2017
# https://github.com/trizen

# A recursive algorithm for finding all the non-negative integer solutions to the equation:
#   a^2 + b^2 = n
# for any given positive integer `n` for which such a solution exists.

# Example:
#   99025 = 41^2 + 312^2 = 48^2 + 311^2 = 95^2 + 300^2 = 104^2 + 297^2 = 183^2 + 256^2 = 220^2 + 225^2

# Blog post:
#   https://trizenx.blogspot.com/2017/10/representing-integers-as-sum-of-two.html

# This algorithm is efficient when the factorization of `n` can be computed.

# See also:
#   https://oeis.org/A001481

func tonelli(n, p) {

    var q = p-1
    var s = valuation(q, 2)

    s == 1 && return powmod(n, (p + 1) >> 2, p)

    q >>= s

    var c = powmod(2 ..^ p -> first {|z| legendre(z, p) == -1 }, q, p)
    var r = powmod(n, (q + 1) >> 1, p)
    var t = powmod(n, q, p)

    while (!p.divides(t - 1)) {

        var b = 1
        var t2 = (t*t % p)

        for i in (1 ..^ s) {
            if (p.divides(t2 - 1)) {
                b = powmod(c, 1 << (s - i - 1), p)
                s = i
                break
            }
            t2 = (t2*t2 % p)
        }

        r = (r*b % p)
        c = (b*b % p)
        t = (t*c % p)
    }

    return r
}

func sqrt_mod_n(a, n) is cached {

    kronecker(a, n) == 1 || return []

    a = (a % n)

    if ((n & (n - 1)) == 0) {       # n is a power of 2

        if (a % 8 == 1) {

            var k = n.valuation(2)

            k == 1 && return [1]
            k == 2 && return [1, 3]
            k == 3 && return [1, 3, 5, 7]

            if (a == 1) {
                return [1, (n>>1) - 1, (n>>1) + 1, n - 1]
            }

            return gather {
                for s in (sqrt_mod_n(a, n >> 1)) {
                    var i = (((s*s - a) >> (k - 1)) % 2)
                    var r = (s + (i << (k - 2)))
                    take(r, n - r)
                }
            }.uniq
        }

        return []
    }

    if (n.is_prime) {               # n is a prime
        return gather {
            var r = tonelli(a, n)
            take(r, n - r)
        }
    }

    var pe = n.factor_exp           # factorize `n` into prime powers

    if (pe.len == 1) {              # `n` is an odd prime power

        var p = pe[0][0]
        var k = pe[0][1]

        kronecker(a, p) == 1 || return []

        var roots = gather {
            var r = tonelli(a, p)
            take(r, n - r)
        }

        var pk = p
        var pi = p*p

        (k-1).times {
            var x = roots[0]
            var y = (invmod(2, pk) * invmod(x, pk))

            roots[0] = ((pi + x - y*(x*x - a + pi)) % pi)
            roots[1] = (pi - roots[0])

            pk *= p
            pi *= p
        }

        return roots
    }

    var solutions = []

    for p,e in (pe) {
        var m = p**e
        var r = sqrt_mod_n(a, m)
        solutions.append(r.map {|r0| [r0, m] })
    }

    gather {
        solutions.cartesian {|*a|
            take(Math.chinese(a...))
        }
    }.uniq
}

func sum_of_two_squares_solutions(n) is cached {

    n == 0 && return [[0, 0]]

    var prod1 = 1
    var prod2 = 1

    var prime_powers = []

    for p,e in (n.factor_exp) {
        if (p % 4 == 3) {                  # p = 3 (mod 4)
            e.is_even || return []         # power must be even
            prod2 *= p**(e >> 1)
        }
        elsif (p == 2) {                   # p = 2
            if (e.is_even) {               # power is even
                prod2 *= p**(e >> 1)
            }
            else {                         # power is odd
                prod1 *= p
                prod2 *= p**((e - 1) >> 1)
                prime_powers.append([p, 1])
            }
        }
        else {                             # p = 1 (mod 4)
            prod1 *= p**e
            prime_powers.append([p, e])
        }
    }

    prod1 == 1 && return [[prod2, 0]]
    prod1 == 2 && return [[prod2, prod2]]

    var solutions = []

    for r in (sqrt_mod_n(prod1-1, prod1)) {

        var s = r
        var q = prod1

        while (s*s > prod1) {
            (s, q) = (q % s, s)
        }

        solutions.append([prod2 * s, prod2 * (q % s)])
    }

    for p,e in (prime_powers) {
        for (var i = e%2; i < e; i += 2) {

            var sq = p**((e - i) >> 1)
            var pp = p**(e - i)

            solutions += (
                __FUNC__(prod1 / pp).map { |pair|
                    pair.map {|r| sq * prod2 * r }
                }
            )
        }
    }

    solutions.map     {|pair| pair.sort } \
             .uniq_by {|pair| pair[0]   } \
             .sort_by {|pair| pair[0]   }
}

for n in (1 .. 1e4) {
    var solutions = sum_of_two_squares_solutions(n) || next
    say %Q(#{n} = #{solutions.map {|a| "#{a[0]}^2 + #{a[1]}^2" }.join(' = ') })
}
