#!/usr/bin/ruby

# Daniel "Trizen" È˜uteu
# Date: 15 April 2019
# https://github.com/trizen

# Represent a given number as a product of primorials (if possible).

# The sequence of numbers that can be represented as a product of primorials, is given by:
#   https://oeis.org/A025487

# Among other terms, the sequence includes the factorials and the highly composite numbers.

# See also:
#   https://oeis.org/A181815 -- "primorial deflation" of A025487(n)
#   https://oeis.org/A108951 -- "primorial inflation" of n is A108951(n)

func primorial_deflation (n) {

    var prod = 1

    while (n > 1) {

        var g = n.gpf          # greatest prime factor
        var p = g.primorial

        n /= p
        n.is_int || return nil

        prod *= g
    }

    return prod
}

var arr = 15.of { primorial_deflation(_!) }     # https://oeis.org/A307035

say arr                                                     #=> [1, 1, 2, 3, 12, 20, 60, 84, 672, 1512, 5040, 7920, 47520, 56160, 157248]
say arr.map {|n| n.factor_prod {|p,e| p.primorial**e } }    #=> [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800, 87178291200]
