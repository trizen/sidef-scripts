#!/usr/bin/ruby

# See also:
#   https://en.wikipedia.org/wiki/Faulhaber%27s_formula
#   https://rosettacode.org/wiki/Faulhaber%27s_formula

func faulhaber_s_formula(p) {

    var formula = gather {
        for j in ^(p+1) {
            take "(#{binomial(p+1, j) * bernoulli(j) -> as_rat})*n^#{p+1 - j}"
        }
    }

    formula.grep! { !.contains('(0)*') }.join!(' + ')

    formula -= /\(1\)\*/g
    formula -= /\^1\b/g
    formula.gsub!(/\(([^+]*?)\)/, {|a| a })

    "1/#{p + 1} * (#{formula})"
}

10.times {|p|
    printf("F(%s) = %s\n", p, faulhaber_s_formula(p))
}

__END__
F(0) = 1/1 * (n)
F(1) = 1/2 * (n^2 + n)
F(2) = 1/3 * (n^3 + 3/2*n^2 + 1/2*n)
F(3) = 1/4 * (n^4 + 2*n^3 + n^2)
F(4) = 1/5 * (n^5 + 5/2*n^4 + 5/3*n^3 + -1/6*n)
F(5) = 1/6 * (n^6 + 3*n^5 + 5/2*n^4 + -1/2*n^2)
F(6) = 1/7 * (n^7 + 7/2*n^6 + 7/2*n^5 + -7/6*n^3 + 1/6*n)
F(7) = 1/8 * (n^8 + 4*n^7 + 14/3*n^6 + -7/3*n^4 + 2/3*n^2)
F(8) = 1/9 * (n^9 + 9/2*n^8 + 6*n^7 + -21/5*n^5 + 2*n^3 + -3/10*n)
F(9) = 1/10 * (n^10 + 5*n^9 + 15/2*n^8 + -7*n^6 + 5*n^4 + -3/2*n^2)
