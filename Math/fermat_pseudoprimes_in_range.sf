#!/usr/bin/ruby

# Daniel "Trizen" È˜uteu
# Date: 30 August 2022
# https://github.com/trizen

# Generate all the k-omega Fermat pseudoprimes in range [a,b]. (not in sorted order)

# Definition:
#   k-omega primes are numbers n such that omega(n) = k.

# See also:
#   https://en.wikipedia.org/wiki/Almost_prime
#   https://en.wikipedia.org/wiki/Prime_omega_function
#   https://trizenx.blogspot.com/2020/08/pseudoprimes-construction-methods-and.html

# PARI/GP program (version 1):
#   fermat_psp(A, B, k, base=2) = A=max(A, vecprod(primes(k))); (f(m, l, p, j) = my(list=List()); forprime(q=p, sqrtnint(B\m, j), if(base%q != 0, my(z=znorder(Mod(base, q)), L=lcm(l, z)); if(gcd(L, m)==1, my(v=m*q, r=nextprime(q+1)); while(v <= B, if(j==1, if(v>=A && if(k==1, !isprime(v), 1) && (v-1)%l == 0 && (v-1)%z == 0 && Mod(base, v)^(v-1) == 1, listput(list, v)), if(v*r <= B, list=concat(list, f(v, l, r, j-1)))); v *= q)))); list); vecsort(Vec(f(1, 1, 2, k)));

# PARI/GP program (version 2):
#   fermat_psp(A, B, k, base) = A=max(A, vecprod(primes(k))); (f(m, l, p, j) = my(list=List()); forprime(q=p, sqrtnint(B\m, j), if(base%q != 0, my(v=m*q, t=q, r=nextprime(q+1)); while(v <= B, my(L=lcm(l, znorder(Mod(base, t)))); if(gcd(L, v) == 1, if(j==1, if(v>=A && if(k==1, !isprime(v), 1) && (v-1)%L == 0, listput(list, v)), if(v*r <= B, list=concat(list, f(v, L, r, j-1)))), break); v *= q; t *= q))); list); vecsort(Vec(f(1, 1, 2, k)));

func fermat_pseudoprimes_in_range(A, B, k, base, callback) {

    A = max(k.pn_primorial, A)

    func (m, lambda, p, j) {

        var s = idiv(B,m).iroot(j)

        for (var r; p <= s; p = r) {

            r = p.next_prime
            next if p.divides(base)

            for (var (q,v) = (p, m*p); v <= B; (q,v) = (q*p, v*p)) {

                var L = lcm(lambda, znorder(base, q))

                L.is_coprime(v) || break

                if (j == 1) {
                    v >= A || next
                    k.is_one && v.is_prime && next
                    L `divides` v-1 || next
                    callback(v)
                    next
                }

                v*r <= B || next
                __FUNC__(v, L, r, j-1)
            }
        }
    }(1, 1, 2, k)

    return callback
}

# Generate all the Fermat pseudoprimes to base 3 in range [1, 10^4]

var from = 1
var upto = 1e4
var base = 3
var arr = []

for k in (1..100) {
    break if k.pn_primorial>upto
    fermat_pseudoprimes_in_range(from, upto, k, base, { arr << _ })
}

say arr.sort

__END__
[91, 121, 286, 671, 703, 949, 1105, 1541, 1729, 1891, 2465, 2665, 2701, 2821, 3281, 3367, 3751, 4961, 5551, 6601, 7381, 8401, 8911]
