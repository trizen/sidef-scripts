#!/usr/bin/ruby

# Algorithm due to M. Joye and J.-J. Quisquater for computing the Lucas U and V sequences.

# See also:
#   https://en.wikipedia.org/wiki/Lucas_sequence

func lucasUVmod(P, Q, n, m) {

    var(U1 = 1)
    var(V1 = 2, V2 = P)
    var(Q1 = 1, Q2 = 1)

    var s = n.valuation(2)

    for j in (n.ilog2 `downto` s+1) {

        Q1 = (Q1 * Q2)%m

        if (n.getbit(j)) {
            Q2 = (Q1 * Q)%m
            U1 = (U1 * V2)%m
            V1 = (V2*V1 - P*Q1)%m
            V2 = (V2*V2 - 2*Q2)%m
        }
        else {
            Q2 = Q1
            U1 = (U1*V1 - Q1)%m
            V2 = (V2*V1 - P*Q1)%m
            V1 = (V1*V1 - 2*Q2)%m
        }
    }

    Q1 = (Q1 * Q2)%m
    Q2 = (Q1 * Q)%m
    U1 = (U1*V1 - Q1)%m
    V1 = (V2*V1 - P*Q1)%m
    Q1 = (Q1 * Q2)%m

    s.times {
        U1 = (U1 * V1)%m
        V1 = (V1*V1 - 2*Q1)%m
        Q1 = (Q1 * Q1)%m
    }

    return (U1, V1)
}

var p = 1e6.irand
var q = 1e6.irand
var n = 1e20.irand
var m = 4123412312

var (U, V) = lucasUVmod(p, q, n, m)

say "lucasU(P=#{p}, Q=#{q}, N=#{n}) = #{U} (mod #{m})"
say "lucasV(P=#{p}, Q=#{q}, N=#{n}) = #{V} (mod #{m})"
